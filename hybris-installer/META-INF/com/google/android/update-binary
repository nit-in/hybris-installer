#!/sbin/sh
# An extensible custom Hybris Installer script.
# https://git.io/fjMH9

# Details about this version:
#   Device  : %DEVICE%
#   Release : %VERSION%
#   Date    : %DATE%
#   Size    : ~%IMAGE_SIZE%

# >>> TWRP init >>>

OUTFD="/proc/self/fd/$2" # e.g. "/proc/self/fd/28"
ZIPFILE="$3"             # e.g. "/sdcard/%DST_PKG%.zip"
FILES="/tmp/hybris-installer"

# Set progress bar percentage using a fraction ($1) in range 0.00 - 1.00
set_progress() { echo -e "set_progress $1\n" > $OUTFD; }

# Print some text ($1) on the screen
ui_print() { [ -z "$1" ] && echo -e "ui_print  \nui_print" > $OUTFD || echo -e "ui_print $@\nui_print" > $OUTFD; }

# Remove package residue files from /tmp and unmount partitions
cleanup() { log "Cleaning up..."; rm -rf $FILES/; }

# Before quitting with an exit code ($1), show a message ($2)
abort() { ui_print "E$1: $2"; cleanup; exit $1; }

other_method(){
    ui_print "toybox Tar failed"
    ui_print "using other method"
    flash_hybris_other_method
}


# Constants & variables
VERSION="%VERSION%" # e.g. "3.2.0.12 (Torronsuo)"
TARGET_LOS_VER="%LOS_VER%" # e.g. "16.0"
DEVICE="%DEVICE%" # e.g. "cheeseburger"# e.g. "cheeseburger"
CURRENT_DEVICE="getprop ro.product.device"
ROOT="/data/.stowaways/sailfishos"
BOOT_DIR="$ROOT/boot"
HYBRIS_BOOT="$BOOT_DIR/hybris-boot.img"
DROID_BOOT="$BOOT_DIR/droid-boot.img"
BOOTIMAGE="/dev/block/bootdevice/by-name/boot"
ARCHIVE="$FILES/sfos-rootfs.tar.bz2"
#SUCCESS_WITH_TOYBOX="true"

#my script

device_check(){
    if [[ ! -z "$CURRENT_DEVICE" = "$DEVICE"  ]]; then
        echo "$CURRENT_DEVICE is not $DEVICE"
        abort 7 "This package is for '$DEVICE' devices; this is a '$CURRENT_DEVICE'."
    fi
}

device_check

flash_hybris(){
        
        ui_print "Extracting zip"
        extract_zip
        ui_print "Extracting rootfs with toybox tar"
        extract_rootfs_with_toybox
}

flash_hybris_other_method(){
        
        cleanup
        ui_print "Extracting zip"
        extract_zip
        ui_print "Extracting rootfs with exported tar"
        extract_rootfs_with_exported_tar
}

extract_zip(){
    
        mkdir -p $FILES/
        unzip -o "$ZIPFILE" -x META-INF/* -d $FILES/

}

extract_rootfs_with_toybox(){

        rm -rf $ROOT/
        mkdir -p $ROOT/
        mount -o rw system
        /system/bin/toybox tar -xj -f $ARCHIVE -C $ROOT/ || other_method
        rm $ARCHIVE
        umount system
    
}

extract_rootfs_with_exported_tar(){

        (cp $FILES/tar /sbin/tar && chmod 777 /sbin/tar) || abort 8 "Couldn't patch tar!"
        rm -rf $ROOT/
        mkdir -p $ROOT/
        tar -xj -f $ARCHIVE -C $ROOT/ || abort 10 "Failed to extract"
    
}

flash_hybris_boot(){
    
    ui_print "Flashing hybris boot image"
    
        ui_print "                          .':oOl."
        ui_print "                       ':c::;ol."
        ui_print "                    .:do,   ,l."
        ui_print "                  .;k0l.   .ll.             .."
        ui_print "                 'ldkc   .,cdoc:'.    ..,;:::;"
        ui_print "                ,o,;o'.;::;'.  'coxxolc:;'."
        ui_print "               'o, 'ddc,.    .;::::,."
        ui_print "               cl   ,x:  .;:c:,."
        ui_print "               ;l.   .:ldoc,."
        ui_print "               .:c.    .:ll,"
        ui_print "                 'c;.    .;l:"
        ui_print "                   :xc.    ,o'"
        ui_print "                   'xxc.   ;o."
        ui_print "                   :l'c: ,lo,"
        ui_print "                  ,o'.ooclc'"
        ui_print "                .:l,,x0o;."
        ui_print "              .;llcldl,"
        ui_print "           .,oOOoc:'"
        ui_print "       .,:lddo:'."
        ui_print "      oxxo;."    
    
    dd if=$HYBRIS_BOOT of=$BOOTIMAGE || abort 5 "writing boot image failed."
    
}

backup_droid_boot(){

    echo "Making backup of android boot image"
    dd if=$BOOTIMAGE of=$DROID_BOOT || abort 8 "backup of current boot image failed."
            
}


force_decrypt(){
    
    ui_print "disbale force encryption"
    mount -o rw vendor
    sed -i "s/forceencrypt/encryptable/g" /vendor/etc/fstab.qcom || abort 9 "could not disable force encryption";
    umount vendor
    ui_print "done"
}

flash_hybris || abort 15 "Sfos Installation failed"
backup_droid_boot
flash_hybris_boot
cleanup
force_decrypt
exit 0
